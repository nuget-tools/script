// JSON Grammar
// ============
//
// Based on the grammar from RFC 7159 [1].
//
// Note that JSON is also specified in ECMA-262 [2], ECMA-404 [3], and on the
// JSON website [4] (somewhat informally). The RFC seems the most authoritative
// source, which is confirmed e.g. by [5].
//
// [1] http://tools.ietf.org/html/rfc7159
// [2] http://www.ecma-international.org/publications/standards/Ecma-262.htm
// [3] http://www.ecma-international.org/publications/standards/Ecma-404.htm
// [4] http://json.org/
// [5] https://www.tbray.org/ongoing/When/201x/2014/03/05/RFC7159-JSON

// ----- 2. JSON Grammar -----

open_markup
  = ws $result:(value ws)* {
      let list = [];
      for(let x of $result)
      {
        list.push(x[0])
      }
      return { "!": "open_markup", "?": list };
    }

begin_array     = ws "[" ws
begin_object    = ws "{" ws
begin_list      = ws "(" ws
end_array       = ws "]" ws
end_object      = ws "}" ws
end_list        = ws ")" ws
name_separator  = ws ":" ws
value_separator = ws ","? ws

//ws "whitespace" = [ \t\n\r]* { return undefined; }

WhiteSpace "whitespace"
  = "\t"
  / "\v"
  / "\f"
  / " "
//  / "\u00A0"
//  / "\uFEFF"
//  / Zs

//Zs = [\u0020\u00A0\u1680\u2000-\u200A\u202F\u205F\u3000]

LineTerminatorSequence "end of line"
  = "\n"
  / "\r\n"
  / "\r"
  / "\u2028"
  / "\u2029"

Comment "comment"
  = MultiLineComment
  / SingleLineComment

MultiLineComment
  = "/*" (!"*/" SourceCharacter)* "*/"

MultiLineCommentNoLineTerminator
  = "/*" (!("*/" / LineTerminator) SourceCharacter)* "*/"

SingleLineComment
  = "//" (!LineTerminator SourceCharacter)*
  / "#" (!LineTerminator SourceCharacter)*

SourceCharacter
  = .

LineTerminator
  = [\n\r\u2028\u2029]

ws = (WhiteSpace / LineTerminatorSequence / Comment)*

// ----- 3. Values -----

value
  = false
  / null
  / true
  / object
  / array
  / number
  / string
  / identifier
  / list

false = "false" { return false; }
null  = "null"  { return null;  }
true  = "true"  { return true;  }

// ----- 4. Objects -----

object
  = begin_object
    members:(
      head:member
      tail:(value_separator @member)*
      {
        var result = {};

        [head].concat(tail).forEach(function(element) {
          result[element.name] = element.value;
        });

        return result;
      }
    )?
    end_object
    { return members !== null ? members: {}; }

member
  = name:(string / Identifier) name_separator value:value {
      if(name === "!") throw new SyntaxError("Key \"!\" is not allowed in object.");
      return { name: name, value: value };
    }

// ----- 5. Arrays -----

array
  = begin_array
    values:(
      head:value
      tail:(value_separator @value)*
      { return [head].concat(tail); }
    )?
    end_array
    { return values !== null ? values : []; }

// ----- 6. Numbers -----

//number "number"
//  = minus? int frac? exp? { return parseFloat(text()); }

number "number"
  = minus? int frac? exp { return {"!": "number", "?": eval(text()), "raw": text(), "cooked": text()}; }
  / minus? int frac      { return {"!": "number", "?": eval(text()), "raw": text(), "cooked": text()}; }
  / minus? int "n"       { return {"!": "number", "?": eval(text().replace("n", "")), "raw": text(), "cooked": text().replace("n", "")+".0"}; }
  / minus? int           { return {"!": "number", "?": eval(text()), "raw": text(), "cooked": text()+".0"}; }

decimal_point
  = "."

digit1_9
  = [1-9]

e
  = [eE]

exp
  = e (minus / plus)? DIGIT+

frac
  = decimal_point DIGIT+

int
  = zero / (digit1_9 DIGIT*)

minus
  = "-"

plus
  = "+"

zero
  = "0"

// ----- 7. Strings -----

string "string"
  = quotation_mark chars:char* quotation_mark { return chars.join(""); }

char
  = unescaped
  / escape
    sequence:(
        '"'
      / "\\"
      / "/"
      / "b" { return "\b"; }
      / "f" { return "\f"; }
      / "n" { return "\n"; }
      / "r" { return "\r"; }
      / "t" { return "\t"; }
      / "u" digits:$(HEXDIG HEXDIG HEXDIG HEXDIG) {
          return String.fromCharCode(parseInt(digits, 16));
        }
    )
    { return sequence; }

escape
  = "\\"

quotation_mark
  = '"'

unescaped
  = [^\0-\x1F\x22\x5C]

// ----- Core ABNF Rules -----

// See RFC 4234, Appendix B (http://tools.ietf.org/html/rfc4234).
DIGIT  = [0-9]
HEXDIG = [0-9a-f]i

// ----- om extension -----

Identifier "identifier"
  = head:IdentifierStart tail:IdentifierPart* {
      return head + tail.join("");
    }

IdentifierStart
  = "_"
  / [a-zA-Z]

IdentifierPart
  = "_"
  / [a-zA-Z0-9]

// ----- ?. Lists -----

identifier
  = Identifier { return {"!": "identifier", "?": text()}; }

list
  = begin_list
    values:(
      head:value
      tail:(value_separator @value)*
      { return [head].concat(tail); }
    )?
    end_list
    { return {"!": "list", "?":  values !== null ? values : []}; }
